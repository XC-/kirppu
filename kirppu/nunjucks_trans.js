const fs = require("fs");

const runtime = require("./static_src/js/nunjucks_trans_runtime");

/**
 * Basic trans-block support for Nunjucks.
 * This class handles the pre-processing phase of the translation.
 *
 * For pre-processing only, attach an instance to Nunjucks environment:
 *    env.addExtension("Trans", new Trans());
 *
 * For extracting messages, add output file name to the instance:
 *    const trans = new Trans({output: "template-strings.js"});
 *    env.addExtension("Trans", trans);
 *    // after processing cycle:
 *    trans.close();
 *
 * In frontend code, include only the runtime (nunjucks_trans_runtime.js) and add
 * the extension to the used environment:
 *    env.addExtension("Trans", new Trans());
 */
class Trans extends runtime.Trans {
    constructor(opts) {
        super();
        const realOpts = {
            output: null,
            location: false,
        };
        if (opts !== undefined) {
            Object.assign(realOpts, opts);
        }
        this.options = realOpts;
        Object.freeze(this.options);

        this.outputFs = null;
    }

    // noinspection JSMethodCanBeStatic
    get tags() {
        return ["trans"]
    }

    open() {
        if (this.options.output != null && this.outputFs == null) {
            this.outputFs = fs.openSync(this.options.output, "w");
            fs.writeSync(this.outputFs,
                "// This AUTOMATICALLY GENERATED stub file is generated by nunjucks-trans.\n", "UTF-8")
        }
        return this.outputFs;
    }

    close() {
        if (this.outputFs != null) {
            fs.closeSync(this.outputFs);
            this.outputFs = null;
        }
    }

    preprocess(src, name) {
        this.currentName = name;
        return src;
    }

    parse(parser, nodes, lexer) {
        const tok = parser.nextToken();
        const args = parser.parseSignature(null, true);
        parser.advanceAfterBlockEnd(tok.value);

        const output = this.open();
        if (output != null) {
            const value = Trans.escape(args.children[0].value);
            const location = this.options.location ? `\n// ${this.currentName}: ${tok.lineno}\n` : "";

            // Extra empty space to avoid external regexes matching the function call.
            const text = `${location}get${""}text("${value}");\n`;
            fs.writeSync(output, text, "UTF-8");
        }

        return new nodes.CallExtension(this, 'run', args);
    }

    static escape(str) {
        return str.replace(/"'\\/, function(m) {
            return "\\" + m;
        });
    }
}

module.exports.Trans = Trans;
